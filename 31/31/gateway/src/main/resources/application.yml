server:
  port: ${GATEWAY_PORT}

spring:
  application:
      name: gateway
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: 
              - "http://localhost:3000"
              - "http://localhost:8080"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      routes:
        - id: auth-service
          uri: ${AUTH_SERVICE_URL}
          predicates:
            - Path=/api/auth/v1/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                key-resolver: "#{@remoteAddressKeyResolver}"

        - id: prescription-service
          uri: ${PRESCRIPTION_SERVICE_URL}
          predicates:
            - Path=/api/prescriptions/v1/**
          filters:
            - JwtValidation
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                key-resolver: "#{@remoteAddressKeyResolver}"

        - id: medicine-service-search
          uri: ${MEDICINE_SERVICE_URL}
          predicates:
            - Path=/api/medicines/v1/search

        - id: medicine-service-admin
          uri: ${MEDICINE_SERVICE_URL}
          predicates:
            - Path=/api/medicines/v1/upload, /api/medicines/v1/cache
          filters:
            - name: AddRequestHeader
              args:
                name: X-User-Roles
                value: ADMIN
            - name: CircuitBreaker
              args:
                name: medicineServiceCircuitBreaker
                fallbackUri: forward:/fallback/medicine-service

      httpclient:
        connect-timeout: 1000
        response-timeout: 5s

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health,metrics

resilience4j:
  circuitbreaker:
    instances:
      medicineServiceCircuitBreaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s

jwt:
  secret-key: ${JWT_SECRET_KEY}
  auth-header: ${AUTH_HEADER}
  bearer-prefix: ${BEARER_PREFIX}
  validate-endpoint: ${VALIDATE_ENDPOINT}